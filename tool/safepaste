#!/usr/bin/env bash

set -eu

# The most important item
cleanup()
{
  [ -z ${cookies+x} ] || rm -f "$cookies"
  [ -z ${tmp_stdin+x} ] || rm -f "$tmp_stdin"
}
trap cleanup EXIT

here="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

url=https://safepaste.org
expiry="day"

log()
{ printf "%s\n" "$*"; }

check_existence()
{
  set +e
  found=$(which "$1")
  exists=$?
  if [ ! "$exists" == "0" ];
  then
    log "$1 not found; please install it." 1>&2
    exit 1
  fi
  set -e
  printf $found
}

## Sanity-check
for p in openssl curl awk grep sed base64 head tail mktemp dd hexdump tr;
do
  export which_$p=$(check_existence "$p")
done

# Tweak flags based on GNU or BSD
uname=$(uname -s)
case "$uname" in
  Darwin|*BSD)
    export which_sed="$which_sed -E"
    ;;
  *)
    # Assume GNU-compatible
    export which_sed="$which_sed -r"
    ;;
esac

curl_error()
{
  log "error: $1"
  exit $2
}

check_status()
{
  set +e
    statuses=$($which_grep -E "HTTP/(1\.1|2)" <<< "$1" \
                  | $which_awk '{print $2;}' \
                  | $which_tr '\n' ' ')
    for status in $statuses;
    do
      case "$status" in
        '100')
          ;;
        '200')
          ;;
        '400')
          curl_error "bad request (check the expiry)" $status
          ;;
        '410')
          curl_error "invalid paste id" $status
          ;;
        '413')
          curl_error "paste is too large" $status
          ;;
        '429')
          curl_error "you've been pasting a lot; try again later" $status
          ;;
        '503')
          curl_error "pasting is currently disabled" $status
          ;;
        *)
          curl_error "unknown" $status
          ;;
      esac
    done
  set -e
}
cookies=$($which_mktemp)
curl_constants="-b $cookies -c $cookies -is"

show_help()
{
  log "safepaste usage:"
  log
  log " upload (from command):  some-command | $0 [option...]"
  log " upload (from file):     $0 [option...] < my-file"
  log " download (to stdout):   $0 [option...] some-url"
  log " download (to file):     $0 [option...] some-url > my-file"
  log
  log "  -h            Show this help message"
  log "  -e <expiry>   Set paste expiry: burn, hour, day, week, month (default: day)"
  log "  -b            Shortcut for -e burn"
  log "  -u <url>      Set the url of the safepaste service (default: https://safepaste.org)"
  exit 1
}

while getopts ":u:e:bh" opt; do
  case $opt in
    u)
      url=$OPTARG
      ;;
    e)
      expiry=$OPTARG
      ;;
    b)
      expiry=burn
      ;;
    h)
      show_help "$0"
      ;;
    \?)
      log "ERROR invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      log "ERROR option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done
# Remove handled opts
shift $(expr $OPTIND - 1 )

if [ $# -eq 1 ];
then
  groups=$($which_sed 's_(.+)/(.+)/?\#(.+)_\1|\2|\3_' <<< "$1" \
            | $which_tr '|' '\n')
  url=$($which_head -1 <<< "$groups")
  id=$($which_head -2 <<< "$groups" | $which_tail -1)
  key=$($which_tail -1 <<< "$groups")

  get=$($which_curl $curl_constants "$url/api/$id")
  check_status "$get"

  data=$($which_tail -1 <<< "$get" \
            | $which_sed 's/.*"data":"([a-zA-Z0-9\+\/\=]+)".*/\1/' \
            | $which_sed 's_\\__g')
  burned=$($which_tail -1 <<< "$get" | $which_sed 's/.*"burned":(true|false).*/\1/')

  plain=$($which_base64 --decode <<< "$data" \
            | $which_openssl aes-256-cbc -md md5 -d -pass pass:"$key")
  log "$plain"
elif [ $# -eq 0 ];
then
  login=$($which_curl $curl_constants "$url/api/login")
  check_status "$login"
  token=$($which_grep "X-CSRF-Token:" <<< "$login" \
            | $which_head -1 \
            | $which_tr -d '\r')
  max_size=$($which_grep "max-size" <<< "$login" \
            | $which_grep -Eo '[0-9]+')

  key=$($which_dd if=/dev/urandom bs=32 count=1 2>/dev/null \
            | $which_hexdump -n 32 -v -e '1/1 "%02x"')

  tmp_stdin=$($which_mktemp)
  cat >> "$tmp_stdin"
  data=$($which_openssl aes-256-cbc -md md5 -pass pass:"$key" -in "$tmp_stdin" \
            | $which_base64 -w 0)

  post=$($which_curl $curl_constants \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "$token" \
            --data "{\"data\":\"$data\",\"expiry\":\"$expiry\"}" \
            "$url/api/new")
  check_status "$post"
  id=$($which_tail -1 <<< "$post" | $which_sed 's/.*"id":"([a-f0-9]+)".*/\1/')
  final_url="$url/$id#$key"
  log "$final_url$([ "$expiry" == "burn" ] && log " (burn after reading)")"
else
  show_help
fi
